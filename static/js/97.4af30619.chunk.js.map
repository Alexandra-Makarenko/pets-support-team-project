{"version":3,"file":"static/js/97.4af30619.chunk.js","mappings":"iRA2HA,UAzG4B,WAAO,IAAD,EAChC,GAAsCA,EAAAA,EAAAA,UAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,MAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,GAAWC,EAAAA,EAAAA,MACjB,GAA6BC,EAAAA,EAAAA,KAArBC,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,KAEdC,GAAOC,EAAAA,EAAAA,IAAYC,EAAAA,IAEnBC,GAAeF,EAAAA,EAAAA,IAAYG,EAAAA,IAC3BC,GAAYJ,EAAAA,EAAAA,IAAYK,EAAAA,IAExBC,GAAiBN,EAAAA,EAAAA,IAAYO,EAAAA,IAC7BC,GAAcR,EAAAA,EAAAA,IAAYS,EAAAA,IAC1BC,GAAWC,EAAAA,EAAAA,MAEXC,EAAa,WACjBvB,GAAe,SAAAwB,GAAQ,OAAIA,EAAW,CAAf,GACxB,GAEDC,EAAAA,EAAAA,YAAU,WACRpB,GAASqB,EAAAA,EAAAA,IAAgBL,EAASM,UACnC,GAAE,CAACtB,EAAUgB,EAASM,YAGvBF,EAAAA,EAAAA,YAAU,WACHf,GAGLR,EAAcQ,EAAKkB,YACpB,GAAE,CAAClB,KAYJe,EAAAA,EAAAA,YAAU,WAENrB,EADqB,wBAAnBa,EACU,aACgB,kBAAnBA,EACG,OACgB,2BAAnBA,EACG,gBACgB,sBAAnBA,EACG,WACgB,iBAAnBA,EACG,YAEA,QAEdZ,GAASwB,EAAAA,EAAAA,IAAkB1B,GAC5B,GAAE,CAACA,EAAUc,EAAgBZ,KAE9BoB,EAAAA,EAAAA,YAAU,WACRzB,EAAe,GACfK,GAASyB,EAAAA,EAAAA,MACV,GAAE,CAAC3B,EAAUE,KAEdoB,EAAAA,EAAAA,YAAU,WACJtB,GACFE,GAAS0B,EAAAA,EAAAA,IAAa,CAAE5B,SAAAA,EAAUgB,YAAAA,EAAapB,YAAAA,KAE5CS,GACLH,GAAS2B,EAAAA,EAAAA,IAAqB,CAAEb,YAAAA,IACjC,GAAE,CAACd,EAAUF,EAAUgB,EAAaX,EAAYT,IAIjD,IAAMkC,EACe,sBAAnBhB,EAAA,OACIP,QADJ,IACIA,GADJ,UACIA,EAAMwB,eADV,aACI,EAAeC,KAAI,SAACC,EAAKC,GAAN,OACjB,SAAC,IAAD,CAEED,IAAKA,EACLvB,aAAcA,EACdJ,KAAMA,EACNQ,eAAgBA,GAJXoB,EAFU,IADvB,OAUIxB,QAVJ,IAUIA,OAVJ,EAUIA,EAAcsB,KAAI,SAACC,EAAKC,GAAN,OAChB,SAAC,IAAD,CAEED,IAAKA,EACLvB,aAAcA,EACdJ,KAAMA,EACNQ,eAAgBA,GAJXoB,EAFS,IASxB,OACE,+BACE,UAAC,IAAD,YACE,SAAC,IAAD,UAAWJ,IAjEU,WACzB,GAAIlC,EAAcE,EAAY,CAC5B,IAAkB,IAAdc,EAGG,OAAO,KAFZ,GAAiB,aAAbZ,EACF,OAAO,SAAC,IAAD,CAAUoB,WAAYA,EAAYe,WAAY,aAE1D,CAEF,CA0DMC,OAIR,C","sources":["components/Notices/NoticesCategoryList/NoticesCategoryList.js"],"sourcesContent":["import { useSelector, useDispatch } from 'react-redux';\nimport {\n  getNotices,\n  getCategoryFilter,\n  getSearchValueFilter,\n  getFavoriteNotices,\n  getNoticesIsLoading,\n} from 'redux/notices/selectors';\nimport { PetsListSection, PetsList } from './NoticesCategoryList.styled';\nimport { useEffect, useState } from 'react';\nimport { fetchNotices, fetchFavoriteNotices } from 'redux/notices/operations';\nimport { useLocation } from 'react-router-dom';\nimport { setStatusFilter } from 'redux/notices/filtersSlice';\nimport { NoticeCategoryItem } from '../NoticeCategoryItem/NoticeCategoryItem';\nimport { useAuth } from 'hooks/useAuth';\nimport { LoadMore } from 'components/LoadMore/LoadMore';\nimport { clearNotices, setCategoryGlobal } from 'redux/notices/noticesSlice';\n\nconst NoticesCategoryList = () => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(null);\n  const [category, setCategory] = useState('');\n\n  const dispatch = useDispatch();\n  const { isLoggedIn, user } = useAuth();\n\n  const pets = useSelector(getNotices);\n\n  const favoritePets = useSelector(getFavoriteNotices);\n  const isLoading = useSelector(getNoticesIsLoading);\n\n  const categoryFilter = useSelector(getCategoryFilter);\n  const searchValue = useSelector(getSearchValueFilter);\n  const location = useLocation();\n\n  const onLoadMore = () => {\n    setCurrentPage(prevPage => prevPage + 1);\n  };\n\n  useEffect(() => {\n    dispatch(setStatusFilter(location.pathname));\n  }, [dispatch, location.pathname]);\n\n\n  useEffect(() => {\n    if (!pets) {\n      return;\n    }\n    setTotalPages(pets.total_pages);\n  }, [pets]);\n\n  const showLoadMoreButton = () => {\n    if (currentPage < totalPages) {\n      if (isLoading === false) {\n        if (category !== 'favorite')\n          return <LoadMore onLoadMore={onLoadMore} ButtonText={'Load More'} />;\n      } else return null;\n    }\n    return;\n  };\n\n  useEffect(() => {\n    if (categoryFilter === '/notices/lost-found') {\n      setCategory('lost-found');\n    } else if (categoryFilter === '/notices/sell') {\n      setCategory('sell');\n    } else if (categoryFilter === '/notices/in-good-hands') {\n      setCategory('in-good-hands');\n    } else if (categoryFilter === '/notices/favorite') {\n      setCategory('favorite');\n    } else if (categoryFilter === '/notices/own') {\n      setCategory('mynotices');\n    } else {\n      setCategory('sell');\n    }\n    dispatch(setCategoryGlobal(category));\n  }, [category, categoryFilter, dispatch]);\n\n  useEffect(() => {\n    setCurrentPage(1);\n    dispatch(clearNotices());\n  }, [category, dispatch]);\n\n  useEffect(() => {\n    if (category) {\n      dispatch(fetchNotices({ category, searchValue, currentPage }));\n    }\n    if (!isLoggedIn) return;\n    dispatch(fetchFavoriteNotices({ searchValue }));\n  }, [dispatch, category, searchValue, isLoggedIn, currentPage]);\n\n\n\n  const result =\n    categoryFilter !== '/notices/favorite'\n      ? pets?.notices?.map((pet, idx) => (\n          <NoticeCategoryItem\n            key={idx}\n            pet={pet}\n            favoritePets={favoritePets}\n            user={user}\n            categoryFilter={categoryFilter}\n          />\n        ))\n      : favoritePets?.map((pet, idx) => (\n          <NoticeCategoryItem\n            key={idx}\n            pet={pet}\n            favoritePets={favoritePets}\n            user={user}\n            categoryFilter={categoryFilter}\n          />\n        ));\n  return (\n    <>\n      <PetsListSection>\n        <PetsList>{result}</PetsList>\n        {showLoadMoreButton()}\n      </PetsListSection>\n    </>\n  );\n};\n\nexport default NoticesCategoryList;\n"],"names":["useState","currentPage","setCurrentPage","totalPages","setTotalPages","category","setCategory","dispatch","useDispatch","useAuth","isLoggedIn","user","pets","useSelector","getNotices","favoritePets","getFavoriteNotices","isLoading","getNoticesIsLoading","categoryFilter","getCategoryFilter","searchValue","getSearchValueFilter","location","useLocation","onLoadMore","prevPage","useEffect","setStatusFilter","pathname","total_pages","setCategoryGlobal","clearNotices","fetchNotices","fetchFavoriteNotices","result","notices","map","pet","idx","ButtonText","showLoadMoreButton"],"sourceRoot":""}