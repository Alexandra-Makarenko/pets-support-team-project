{"version":3,"file":"static/js/752.9795e09d.chunk.js","mappings":"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","sources":["Validations/AuthErrorMessage.styled.js","Validations/RegisterValidation.js","components/Auth/LoginForm/LoginForm.styled.js","components/Auth/LoginForm/LoginForm.js","pages/LoginPage/LoginPage.js","styles/device.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n  display: block;\n  margin-top: 4px;\n  color: red;\n`;\n","import { ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { ErrorText } from './AuthErrorMessage.styled';\n\nconst nameRules = /^[aA-zZ\\s]+$/;\nconst passwordRules = /^(\\S+$)/g;\nconst emailRules = /^(?!.*@[^,]*,)/;\n\nexport const stepOneReqisterSchema = yup.object().shape({\n  email: yup\n    .string()\n    .min(10, 'Minimum number of characters 10')\n    .max(63, 'Password is too long')\n    .email('Please enter a valid email')\n    .matches(emailRules, 'Only alphabets are allowed for this field ')\n    .required('Email is a required field'),\n  password: yup\n    .string()\n    .min(7, 'Password is too short')\n    .max(32, 'Password is too long')\n    .matches(passwordRules, 'Any characters except spaces')\n    // .matches(passwordRules, { message: 'Please create a stronger password' })\n    .required('Password is a required field'),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .required('Please enter the password again'),\n});\n\nexport const stepTwoReqisterSchema = yup.object().shape({\n  name: yup\n    .string()\n    .min(2, 'Minimum number of characters 2')\n    .max(16, 'Maximum number of characters 16')\n    .matches(nameRules, 'Only alphabets are allowed for this field ')\n    .required('Name is a required field'),\n  region: yup.string().required('Required'),\n  phone: yup\n    .string()\n    // .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .required('Required'),\n});\n\nexport const FormError = ({ name }) => {\n  return (\n    <ErrorMessage\n      name={name}\n      render={message => <ErrorText>{message}</ErrorText>}\n    />\n  );\n};\n","import styled from 'styled-components';\nimport { Field } from 'formik';\nimport { NavLink } from 'react-router-dom';\nimport register_bg_step1_mob from '../../../assets/images/bg-pictures/mobile/register_bg_step1_mob.png';\nimport tablet_vector_1 from '../../../assets/images/bg-pictures/tablet/tablet_vector_1.png';\nimport tablet_vector_2 from '../../../assets/images/bg-pictures/tablet/tablet_vector_2.png';\nimport tablet_vector_3 from '../../../assets/images/bg-pictures/tablet/tablet_vector_3.png';\nimport tablet_vector_4 from '../../../assets/images/bg-pictures/tablet/tablet_vector_4.png';\nimport tablet_vector_5 from '../../../assets/images/bg-pictures/tablet/tablet_vector_5.png';\nimport tablet_vector_6 from '../../../assets/images/bg-pictures/tablet/tablet_vector_6.png';\nimport desktop_vector_1 from '../../../assets/images/bg-pictures/desktop/desktop_vector_1.png';\nimport desktop_vector_2 from '../../../assets/images/bg-pictures/desktop/desktop_vector_2.png';\nimport desktop_vector_3 from '../../../assets/images/bg-pictures/desktop/desktop_vector_3.png';\nimport { device } from 'styles/device';\n\nexport const SectionLoginForm = styled.section`\n  min-height: 100vh;\n  padding-top: 42px;\n  padding-bottom: 159px;\n  background-color: ${props => props.theme.backgrounds.input};\n\n  background-image: url(${register_bg_step1_mob});\n\n  background-size: 'contain';\n  background-position: left 50% bottom 0px;\n  background-repeat: no-repeat;\n\n  @media ${device.tablet} {\n    padding-top: 204px;\n    padding-bottom: 299px;\n    background-image: url(${tablet_vector_3}), url(${tablet_vector_2}),\n      url(${tablet_vector_4}), url(${tablet_vector_1}), url(${tablet_vector_5}),\n      url(${tablet_vector_6});\n\n    background-position: left 0 bottom 0, right 0 bottom 0, right 0 bottom 0,\n      right 0 bottom 0, left 163px bottom 163px, left 24px bottom 256px;\n  }\n\n  @media ${device.desktop} {\n    padding-top: 80px;\n    padding-bottom: 147px;\n    background-image: url(${desktop_vector_1}), url(${desktop_vector_2}),\n      url(${desktop_vector_3}), url(${tablet_vector_5}), url(${tablet_vector_6});\n\n    background-position: right 305px bottom 0, right 96px bottom 0,\n      right 0 bottom 0, left 258px bottom 131px, left 32px bottom 248px;\n  }\n`;\n\nexport const LoginFormContainer = styled.div`\n  max-width: 320px;\n  padding: 0px 20px;\n  /* margin-bottom: ${props =>\n    props.currentStep === 0 ? `266px` : `223px`}; */\n  /* padding-left: 20px;\n  padding-right: 20px; */\n  margin: 0px auto;\n  /* margin-left: auto;\n  margin-right: auto; */\n  text-align: center;\n  padding-left: 20px;\n  padding-right: 20px;\n  /* padding-bottom: ${props =>\n    props.currentStep === 0 ? `103px` : `59px`}; */\n\n  @media ${device.tablet} {\n    max-width: 768px;\n    padding: 0px 80px;\n  }\n\n  @media ${device.desktop} {\n    max-width: 1280px;\n    padding: 0px 331px;\n  }\n`;\n\nexport const LoginFormBox = styled.div`\n  @media ${device.tablet} {\n    background-color: ${props => props.theme.backgrounds.bodySecondary};\n    box-shadow: 7px 4px 14px rgba(0, 0, 0, 0.11);\n    border-radius: 40px;\n    padding-top: 60px;\n    padding-bottom: 40px;\n    padding-right: 80px;\n    padding-left: 80px;\n  }\n\n  @media ${device.desktop} {\n    padding-bottom: 60px;\n  }\n`;\n\nexport const LoginTitle = styled.h1`\n  margin-bottom: 40px;\n  font-family: 'Manrope700';\n  font-size: 24px;\n  line-height: 33px;\n  letter-spacing: ${props => props.theme.fonts.letterSpacing};\n  color: ${props => props.theme.fontColors.primary};\n\n  @media ${device.tablet} {\n    font-family: 'Manrope500';\n    font-size: 36px;\n    line-height: 49px;\n  }\n\n  @media ${device.desktop} {\n  }\n`;\n\nexport const FormInput = styled(Field)`\n  display: block;\n  font-family: 'Manrope400';\n  font-size: 14px;\n  line-height: 19px;\n  letter-spacing: ${props => props.theme.fonts.letterSpacing};\n  width: 100%;\n  margin-top: 16px;\n  padding-top: 11px;\n  padding-bottom: 12px;\n  padding-left: 14px;\n  color: ${props => props.theme.fontColors.inputTextColor};\n  outline: none;\n  background-color: ${props => props.theme.backgrounds.input};\n  border: 1px solid rgba(245, 146, 86, 0.5);\n  border-radius: 40px;\n\n  @media ${device.tablet} {\n    font-size: 18px;\n    line-height: 25px;\n    padding-top: 14px;\n    padding-bottom: 13px;\n    padding-left: 32px;\n  }\n\n  @media ${device.desktop} {\n  }\n`;\n\nexport const LoginSubmitBtn = styled.button`\n  font-family: 'Manrope500';\n  margin-top: 40px;\n  width: 100%;\n  color: ${props => props.theme.fontColors.white};\n  background-color: ${props => props.theme.backgrounds.buttonPrimary};\n  border-radius: 40px;\n  padding-top: 8.5px;\n  padding-bottom: 8.5px;\n  font-weight: 500;\n  font-size: 20px;\n  line-height: 27px;\n  letter-spacing: ${props => props.theme.fonts.letterSpacing};\n  outline: none;\n  border: none;\n  transition: all 0.3s ease-in-out;\n  &:hover {\n    transform: scale(1.03);\n  }\n\n  @media ${device.tablet} {\n    margin-top: 40px;\n  }\n\n  @media ${device.desktop} {\n    padding-top: 10.5px;\n    padding-bottom: 10.5px;\n  }\n`;\n\nexport const LoginBoxText = styled.div`\n  margin-top: 40px;\n`;\n\nexport const LoginLinkText = styled.p`\n  font-family: 'Manrope400';\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 16px;\n  letter-spacing: ${props => props.theme.fonts.letterSpacing};\n  color: ${props => props.theme.fontColors.inputTextColor};\n`;\n\nexport const LoginLink = styled(NavLink)`\n  color: ${props => props.theme.fontColors.blueLink};\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik, Form } from 'formik';\nimport { nanoid } from 'nanoid';\nimport { logIn } from 'redux/auth/authOperations';\n// import * as yup from 'yup';\n\nimport {\n  stepOneReqisterSchema,\n  FormError,\n} from 'Validations/RegisterValidation';\n\nimport {\n  LoginFormContainer,\n  FormInput,\n  SectionLoginForm,\n  LoginTitle,\n  LoginLinkText,\n  LoginBoxText,\n  LoginLink,\n  LoginSubmitBtn,\n  LoginFormBox,\n} from './LoginForm.styled';\n\nexport const LoginForm = () => {\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const dispatch = useDispatch();\n\n  const initialState = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = values => {\n    const body = {\n      email: values.email,\n      password: values.password,\n    };\n\n    console.log('Form Submitted', body);\n    dispatch(logIn(body));\n  };\n\n  return (\n    <SectionLoginForm>\n      <LoginFormContainer>\n        <LoginFormBox>\n          <LoginTitle>Login</LoginTitle>\n          <Formik\n            initialValues={initialState}\n            validationSchema={stepOneReqisterSchema}\n            onSubmit={handleSubmit}\n          >\n            {({ isValid, dirty }) => (\n              <Form autoComplete=\"off\">\n                <FormInput\n                  id={emailInputId}\n                  // label=\"Email\"\n                  // variant=\"outlined\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  // type=\"email\"\n                  autoComplete=\"off\"\n                  // required\n                />\n                <FormError name=\"email\" />\n                <FormInput\n                  id={passwordInputId}\n                  // label=\"Password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  type=\"password\"\n                  autoComplete=\"off\"\n                  // required\n                  // error={Boolean(errors.name) && Boolean(touched.name)}\n                  // helperText={Boolean(touched.name) && errors.name}\n                />\n                <FormError name=\"password\" />\n                <LoginSubmitBtn type=\"submit\">Login</LoginSubmitBtn>\n              </Form>\n            )}\n          </Formik>\n          <LoginBoxText>\n            <LoginLinkText>\n              Don't have an account?{' '}\n              <LoginLink to=\"/register\">Register</LoginLink>\n            </LoginLinkText>\n          </LoginBoxText>\n        </LoginFormBox>\n      </LoginFormContainer>\n    </SectionLoginForm>\n  );\n};\n\n// Formik\n// const initialValues = {\n//   email: '',\n//   password: '',\n//   confirmPassword: '',\n// };\n\n// const handleSubmit = (value, actions) => {\n//   const body = {\n//     email: value.email,\n//     password: value.password,\n//     confirmPassword: value.confirmPassword,\n//   };\n\n//   console.log(body);\n//   // dispatch(register(body));\n//   // actions.resetForm();\n//   // setValues({ ...values, password: '' });\n// };\n\n// return (\n//   <SectionRegisterForm>\n//     <RegisterFormContainer>\n//       <RegisterTitle>Registration</RegisterTitle>\n//       <Formik\n//         initialValues={initialValues}\n//         // validationSchema={yup.object().shape({\n//         //   name: yup\n//         //     .string()\n//         //     .required('Please enter name')\n//         //     .min(2, 'Name too short'),\n//         //   email: yup\n//         //     .string()\n//         //     .required('Please enter email')\n//         //     .email('Invalid email'),\n//         //   password: yup\n//         //     .string()\n//         //     .required('Please enter password')\n//         //     .min(7, 'Password should be minimum 7 characters long'),\n//         // })}\n//         onSubmit={handleSubmit}\n//       >\n//         {() => (\n//           <Form autoComplete=\"off\">\n//             <FormInput\n//               id={emailInputId}\n//               // label=\"Email\"\n//               // variant=\"outlined\"\n//               name=\"email\"\n//               placeholder=\"Email\"\n//               // type=\"email\"\n//               autoComplete=\"off\"\n//               // required\n//               // error={Boolean(errors.email) && Boolean(touched.email)}\n//               // helperText={Boolean(touched.email) && errors.email}\n//             />\n//             <FormInput\n//               id={passwordInputId}\n//               // label=\"Password\"\n//               name=\"password\"\n//               placeholder=\"Password\"\n//               type=\"password\"\n//               autoComplete=\"off\"\n//               // required\n//               // error={Boolean(errors.name) && Boolean(touched.name)}\n//               // helperText={Boolean(touched.name) && errors.name}\n//             />\n//             <FormInput\n//               id={confirmPasswordInputId}\n//               // label=\"Password\"\n//               // variant=\"outlined\"\n//               name=\"confirmPassword\"\n//               placeholder=\"Confirm Password\"\n//               type=\"password\"\n//               autoComplete=\"off\"\n//               // required\n//               // error={Boolean(errors.name) && Boolean(touched.name)}\n//               // helperText={Boolean(touched.name) && errors.name}\n//             />\n\n//             <NextFormRegisterBtn type=\"submit\">Next</NextFormRegisterBtn>\n//           </Form>\n//         )}\n//       </Formik>\n//       <RegisterBoxText>\n//         <RegisterLinkText>\n//           Already have an account?{' '}\n//           <ReqisterLoginLink to=\"/about\">Login</ReqisterLoginLink>\n//         </RegisterLinkText>\n//       </RegisterBoxText>\n//       {/* <RegisterBgImg></RegisterBgImg> */}\n//     </RegisterFormContainer>\n//   </SectionRegisterForm>\n// );\n","import { LoginForm } from 'components/Auth/LoginForm/LoginForm';\n\nconst LoginPage = () => {\n  return (\n    <main>\n      <title>Login</title>\n      <LoginForm />\n    </main>\n  );\n};\nexport default LoginPage;\n","const size = {\n  mobile: '320px',\n  mobileTablet: '480px',\n  tablet: '768px',\n  desktop: '1280px',\n  preMobile: '319px',\n  preMobileTablet: '479px',\n  preTablet: '767px',\n  preDesktop: '1279px'\n}\nexport const device = {\n  mobile: `(min-width: ${size.mobile})`,\n  mobileTablet: `(min-width: ${size.mobileTablet})`,\n  tablet: `(min-width: ${size.tablet})`,\n  desktop: `(min-width: ${size.desktop})`,\n  preMobile: `(max-width: ${size.preMobile})`,\n  preMobileTablet: `(max-width: ${size.preMobileTablet})`,\n  preTablet: `(max-width: ${size.preTablet})`,\n  preDesktop: `(max-width: ${size.preDesktop})`\n};"],"names":["ErrorText","styled","stepOneReqisterSchema","yup","shape","email","min","max","matches","required","password","confirmPassword","oneOf","stepTwoReqisterSchema","name","region","phone","FormError","render","message","SectionLoginForm","props","theme","backgrounds","input","register_bg_step1_mob","device","tablet_vector_3","tablet_vector_2","tablet_vector_4","tablet_vector_1","tablet_vector_5","tablet_vector_6","desktop_vector_1","desktop_vector_2","desktop_vector_3","LoginFormContainer","currentStep","LoginFormBox","bodySecondary","LoginTitle","fonts","letterSpacing","fontColors","primary","FormInput","Field","inputTextColor","LoginSubmitBtn","white","buttonPrimary","LoginBoxText","LoginLinkText","LoginLink","NavLink","blueLink","LoginForm","emailInputId","nanoid","passwordInputId","dispatch","useDispatch","initialValues","validationSchema","onSubmit","values","body","console","log","logIn","isValid","dirty","autoComplete","id","placeholder","type","to","size","mobile","mobileTablet","tablet","desktop","preMobile","preMobileTablet","preTablet","preDesktop"],"sourceRoot":""}