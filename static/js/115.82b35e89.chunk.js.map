{"version":3,"file":"static/js/115.82b35e89.chunk.js","mappings":"yOAMaA,EAAgB,mCAAG,sGACLC,EAAAA,EAAAA,IAAA,UALV,gCAKU,oCAHf,qCAEoB,cACtBC,EADsB,OAEtBC,EAASD,EAASE,KAAKC,QAC7BC,QAAQC,IAAIJ,GAHgB,kBAIrBA,GAJqB,2CAAH,qD,6BCyC7B,EA1C4B,WAExB,OAA4BK,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KACA,GAAwBN,EAAAA,EAAAA,UAAS,IAAjC,eAAOO,EAAP,KAAaC,EAAb,KAGMC,GAAiBC,EAAAA,EAAAA,MAAcC,SAGjCC,GAAaC,EAAAA,EAAAA,cAAW,iBAAC,oGAE7BT,GAAa,GAFgB,SAGVZ,IAHU,OAGvBe,EAHuB,OAI7BC,EAAQD,GAJqB,gDAM7BD,EAAS,0BANoB,yBAQ7BF,GAAa,GARgB,4EAU9B,IASD,OAPAU,EAAAA,EAAAA,YAAU,WACNhB,QAAQC,IAAIU,GACZP,EAAUO,GACVX,QAAQC,IAAI,QAASE,GACpBW,GACF,GAAE,CAACH,EAAgBR,EAAOW,KAG3B,yBACIT,GAKwB,wCALTE,GAKZ,yBAAMA,KALe,yBACzBE,EAAKQ,KAAI,SAACR,GAAD,OACJ,gCACF,wBAAKA,EAAKS,SADET,EAAKU,GADX,OAOf,C","sources":["api.js","components/Notices/NoticesCategoryList/NoticesCategoryList.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n// const KEY = '2e84a3ac834b739d0dd29a1e9937557'\nconst KEY = '2e84a3ac834b739d0dd29a1e99375572'\n\nexport const getTrendingFilms = async () => {\n    const response = await axios.get(`${BASE_URL}trending/all/day?api_key=${KEY}`);\n    const result = response.data.results;\n    console.log(result)\n    return result;\n};\n// export const getFilms = async (query) => {\n//     const response = await axios.get(`${BASE_URL}search/movie?api_key=${KEY}&query=${query}&page=1`);\n//     const result = response.data.results;\n//     console.log(result)\n//     return result;\n// };\n// export const getFilmById = async (movieId) => {\n//     const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n//     const result = response.data;\n//     //  const result = response.data.genres.map(genre=>genre.name);\n//     console.log(result)\n//     return result;\n// };\n// export const getFilmGenres = async (movieId) => {\n//     const response = await axios.get(`${BASE_URL}movie/${movieId}?api_key=${KEY}&language=en-US`);\n//     const result = response.data.genres.map(genre=>genre.name);\n//     console.log(result)\n//     return result;\n// };\n// export const getFilmCast = async (movieId) => {\n//     const response = await axios.get(`${BASE_URL}movie/${movieId}/credits?api_key=${KEY}&language=en-US`);\n//     const result = response.data.cast;\n//     console.log(result)\n//     return result;\n// };\n// export const getFilmReviews = async (movieId) => {\n//     const response = await axios.get(`${BASE_URL}movie/${movieId}/reviews?api_key=${KEY}&language=en-US`);\n//     const result = response.data.results;\n//     console.log(result)\n// //     return result;\n// };\n\n\n\n\n\n","import { getTrendingFilms } from \"api\";\nimport { useState, useEffect,useCallback  } from 'react';\nimport { useLocation} from \"react-router-dom\";\n\n\nconst NoticesCategoryList = () => {\n\n    const [filter, setFilter] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [film, setFilm] = useState([]);\n    \n \n    const categoryFilter = useLocation().pathname;\n   \n  \n  const fetchFilms = useCallback(async () => {\n  try {\n    setIsLoading(true);\n    const film = await getTrendingFilms();\n    setFilm(film);\n  } catch {\n    setError('Failed to load film :(');\n  } finally {\n    setIsLoading(false);   \n  }\n}, []);\n  \n  useEffect(() => {\n      console.log(categoryFilter);\n      setFilter(categoryFilter);\n      console.log('state', filter);\n       fetchFilms();\n    }, [categoryFilter, filter,fetchFilms]);\n\n  return (\n    <div>\n      {!isLoading ?  (!error ?  <div>\n      {film.map((film) => (\n            <div key={film.id}\n        > <li>{film.name}</li></div>         \n                ))}\n    </div>:<div>{error}</div>) :<div>Is loading</div>}\n      </div>\n    );\n};\n\nexport default NoticesCategoryList;\n"],"names":["getTrendingFilms","axios","response","result","data","results","console","log","useState","filter","setFilter","isLoading","setIsLoading","error","setError","film","setFilm","categoryFilter","useLocation","pathname","fetchFilms","useCallback","useEffect","map","name","id"],"sourceRoot":""}